apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: argocd
  finalizers:
    # The default behaviour is foreground cascading deletion
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 61.2.0
    helm:
      passCredentials: false
      releaseName: prometheus
      valuesObject:
        alertmanager:
          config:
            global:
              resolve_timeout: 5m
            inhibit_rules:
            - equal:
              - namespace
              - alertname
              source_matchers:
              - severity = critical
              target_matchers:
              - severity =~ warning|info
            - equal:
              - namespace
              - alertname
              source_matchers:
              - severity = warning
              target_matchers:
              - severity = info
            - equal:
              - namespace
              source_matchers:
              - alertname = InfoInhibitor
              target_matchers:
              - severity = info
            - target_matchers:
              - alertname = InfoInhibitor
            receivers:
            - name: "telegram"
              telegram_configs:
              - api_url: https://api.telegram.org
                bot_token: 7394141535:AAFXqKcwDG5vf8J-LqzbIxYi_13e4EQpbY4
                chat_id: 5916399736
            route:
              group_by:
              - namespace
              group_interval: 5m
              group_wait: 30s
              receiver: "telegram"
              repeat_interval: 12h
              routes:
              - matchers:
                - alertname = "Watchdog"
                receiver: "telegram"
            templates:
            - /etc/alertmanager/config/*.tmpl
        prometheus-windows-exporter:
          prometheus:
            monitor:
              enabled: false
        crds:
          enabled: true
        grafana:
          persistence:
            enabled: true
            storageClassName: "gp2"
          # ingress:
          #   enabled: true
          #   hosts: 
          #   - mqgrafana.atech-bot.click
          #   ingressClassName: alb
          #   annotations:
          #     kubernetes.io/ingress.class: alb
          #     external-dns.alpha.kubernetes.io/hostname: mqgrafana.atech-bot.click
          #     external-dns.alpha.kubernetes.io/alias: "true"
          #     alb.ingress.kubernetes.io/group.name: my-ingress-group
          #     alb.ingress.kubernetes.io/ssl-redirect: '443'
          #     alb.ingress.kubernetes.io/target-type: 'ip'
          #     alb.ingress.kubernetes.io/scheme: internet-facing
          #     alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-1:933060838752:certificate/2b99790c-bf56-4389-a7de-9f2dea48339f
  destination:
    server: "https://kubernetes.default.svc"
    namespace: monitoring
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=true # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true
    - ServerSideApply=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation # Only sync out-of-sync resources, rather than applying every object in the application